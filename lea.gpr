--  This is a GNAT, GCC or GNAT Studio project file
--  for the LEA project:
--
--      home page:     http://l-e-a.sf.net/
--      project page:  http://sf.net/projects/l-e-a/
--      mirror:        https://github.com/zertovitch/lea
--
--  Build me with "gprbuild -P lea", or open me with GNAT Studio
--
--  Caution (Windows): due to the Scintilla DLL which is
--  32-bit, you need a 32-bit GNAT for Windows (<= 2017)
--
--  *** External libraries ***
--  * 
--  *     You need to make the following projects' source files visible to this project
--  *     through the ad-hoc (not GNAT / AdaCore official) GNAT_SOURCE_PATH environment variable:
--  *   
--  *   * GWindows and contributions:
--  *       [gnavi]\gwindows\framework
--  *       [gnavi]\gwindows\contrib
--  *       [gnavi]\gnatcom\framework
--  *       Project URL: http://sf.net/projects/gnavi/
--  *       Mirror URL: https://github.com/zertovitch/gwindows
--  *       NB: The Unicode (default) mode of GWindows is needed; in doubt, run [gnavi]\gwindows\unicode.cmd
--  *   
--  *   * HAC Ada Compiler:
--  *       Project URL: https://sourceforge.net/projects/hacadacompiler/
--  *       Mirror URL: https://github.com/zertovitch/hac
--  *   
--  *   * Zip-Ada:
--  *       [zip-ada]\zip_lib
--  *       Project URL: http://unzip-ada.sf.net
--  *       Mirror URL: https://github.com/zertovitch/zip-ada
--  * 
--  *  Example: GNAT_SOURCE_PATH=C:\Ada\gnavi\gwindows\framework;C:\Ada\gnavi\gwindows\contrib;C:\Ada\gnavi\gnatcom\framework;
--  *  =======    C:\Ada\zip-ada\zip_lib;
--  *             C:\Ada\HAC\src;C:\Ada\HAC\src\compile;C:\Ada\HAC\src\execute

project LEA is

   type Build_Mode_Type is
      ("Debug", "Debug_MinGW", "Fast", "Fast_MinGW");
   Build_Mode : Build_Mode_Type := external ("Build_Mode", "Debug");
   for Main use ("lea.adb", "sample_catalogue.adb");
   for Source_Dirs use (".") & external_as_list("GNAT_SOURCE_PATH", ";");
   for Exec_Dir use ".";
   for Create_Missing_Dirs use "True";  --  Flips by default the "-p" switch

   case Build_Mode is
      when "Debug" =>
         for Object_Dir use "obj/debug";
      when "Fast" =>
         for Object_Dir use "obj/fast";
      when "Debug_MinGW" =>
         for Object_Dir use "obj/debug_ming";
      when "Fast_MinGW" =>
         for Object_Dir use "obj/fast_ming";
   end case;

   Common_Compiler_Options := (
     "-gnatwa",                        --  Warnings switches (a:turn on all info/warnings marked with +)
     --  "-gnatwh",                        --  Warnings switches (h:turn on warnings for hiding declarations)
     "-gnatwcijkmopruvz.c.p.t.w.x",    --  Warnings switches (run "gnatmake" for full list)
     "-gnatf",  --  Full errors. Verbose details, all undefined references
     "-gnatq",  --  Don't quit, try semantics, even if parse errors
     "-gnatQ",  --  Don't quit, write ali/tree file even if compile errors
     --
     "-gnatyaknpr",   --  Style: check all casings: a:attribute, k:keywords, n:package Standard identifiers, p:pragma, r:identifier references
     "-gnatybfhiu",   --  Style: check b:no blanks at end of lines, f:no ff/vtabs, h: no htabs, i:if-then layout, u:no unnecessary blank lines
     "-gnatyx",       --  Style: check x:no extra parens
     "-gnatye",       --  Style: check e:end/exit labels present
     "-gnatyc"        --  Style: check c:comment format (two spaces)
     --  "-gnatyt",       --  Style: check t:token separation rules
   );
   
   Debug_Options := (
     "-gnata",         --  Assertions enabled
     "-gnato",         --  Enable overflow checking in STRICT mode
     "-gnatVa",        --  Enable all validity checking options
     "-fstack-check",
     "-fno-inline",
     --
     "-g"              --  Generate debugging information
   );

   Fast_Options := (
     "-O2",
     "-gnatpn", 
     "-fipa-cp-clone", "-fgcse-after-reload", 
     "-funroll-loops", "-fpeel-loops", "-funswitch-loops", 
     "-ftracer", "-fweb", "-ftree-vectorize",
     "-frename-registers", "-ffunction-sections",
     "-g"     
   );

   package Compiler is
      case Build_Mode is
         when "Debug" | "Debug_MinGW" =>
            for Default_Switches ("ada") use Common_Compiler_Options & Debug_Options;
            for Local_Configuration_Pragmas use project'Project_Dir & "debug.pra";
         when "Fast"  | "Fast_MinGW"  =>
            for Default_Switches ("ada") use Common_Compiler_Options & Fast_Options;
            for Local_Configuration_Pragmas use project'Project_Dir & "lea_elim.pra";
      end case;
   end Compiler;

   package Linker is
      case Build_Mode is
         when "Debug" | "Debug_MinGW" =>
            for Default_Switches ("ada") use ("-g",                                   "lea.rbj", "-Xlinker", "--stack=0x2000000,0x20000");
         when "Fast" | "Fast_MinGW" =>
            for Default_Switches ("ada") use ("-mwindows", "-s", "-Wl,--gc-sections", "lea.rbj", "-Xlinker", "--stack=0x2000000,0x20000");
       end case;
   end Linker;

   package Builder is
      --   "If -j0 is used, then the maximum number of simultaneous compilation
      --    jobs is the number of core processors on the platform."
      for Default_Switches ("ada") use ("-j0");
   end Builder;

   package Ide is
      for Default_Switches ("adacontrol") use ("-f", "verif.aru");
   end Ide;

end LEA;
