==============
LEA quick help
==============

This quick help consists in few random notes about LEA
functionalities that are not self-explanatory from the menus.


Display
=======

  Highlighting of occurrences of selected strings
  ===============================================
  You will notice that when you select a portion of text, occurrences
  of that text will be highlighted as well. There are a few rules about
  this algorithm:
    - when a whole word is marked, only identical whole words are
        highlighted; this is for showing identical identifiers only
    - the feature is disabled automatically on selections spanning over
        multiple lines
    - the highlighting is performed only in a region of a few hundreds
        of lines around the selection, in order to avoid time
        overconsumption issues on very large texts


Editing
=======

  Multi-line editing & rectangular selection using the Alt Key
  ============================================================

  LEA provides a very convenient feature that is not linked to a
  specific menu command or button: the multi-line editing.
  If you press the Alt key, then select any piece of text
  with the mouse, you'll notice the following:
    - the cursor spans vertically on all lines concerned by the selection
    - a rectangle of text is selected instead of the full
      text between the position when the button was pushed down
      and the current mouse pointer position
    - any typing occurs on all concerned lines.
    
  This is extremely useful for adjusting indentation within lines,
  removing contents within a rectangle, or typing contents on a range
  of lines. It can for instance be used for transforming an enumeration
  into a case statement, by typing "when " and "=>" on all different cases;
  or add ":= " in a record for adding initializations, or many situations
  where a "Find & Replace" operation, with some guess-work, trial & error and
  manual adjustments would be used instead.

Running small programs with HAC (HAC Ada Compiler)
==================================================

LEA embeds a limited and experimental Ada compiler (HAC) that
allows you to run and test small algorithms in a quick
build - run - change cycle.
No need to wait for lengthy compile, bind, link times: with HAC,
all of this is done in a few milliseconds.

Press F4 for build only; 
Press F9 for build and run - that's it!

A peculiarity of HAC is to require the following header:

    with HAC_Pack;  use HAC_Pack;

which allows immediate visibility of text I/O subprograms and of
some mathematical functions. For compatibility, a real Ada implementation
of HAC_Pack can be found in the trunk/sma_exm/special/ directory, @

    https://sourceforge.net/projects/hacadacompiler/ (see Download or Code)
or
    https://github.com/svn2github/hac
    
Curently only a few examples in the sma_exm directory are working (basically
those without tasking): 
   hello.adb
   test.adb
   test1.adb
   shell_sort.adb
   merge_sort.adb

The available Ada language subset is so far the "Pascal subset", so you already
have custom types, nested subprograms, recursion to play with.
